import mxnet as mx
from mxnet import image
from mxnet.gluon.data.vision import transforms
import gluoncv as gcv
import hashlib
from pylab import rcParams
from matplotlib import pyplot as plt
from gluoncv import model_zoo, data, utils
import numpy as np
import os
from pathlib import Path

rcParams['figure.figsize'] = 5, 10

for model in gcv.model_zoo.get_model_list():
    print(model)

model_options = ['senet_154',
                 'mobilenetv3_large',
                 'faster_rcnn_fpn_resnet101_v1d_coco',
                 'yolo3_darknet53_coco',
                 'fcn_resnet101_coco',
                 'deeplab_resnet101_coco']

selected_model = model_options[3]

def load_image(filepath):
    return mx.image.imread(filepath)

test_filepath = Path(___)
test_output = load_image(test_filepath)

plt.imshow(test_output.asnumpy())
fig = plt.gcf()
fig.set_size_inches(14, 14)
plt.show()

def transform_image(array):
    norm_image, unnorm_image = gcv.data.transforms.presets.yolo.transform_test(array, ___)
    return norm_image, unnorm_image

plt.imshow(unnorm_image)
fig = plt.gcf()
fig.set_size_inches(14, 14)
plt.show()

def detect(network, data):
    class_ids, scores, bounding_boxes = network(data)
    return class_ids, scores, bounding_boxes

class_ids, scores, bounding_boxes = detect(network, norm_image)

ax = utils.viz.plot_bbox(unnorm_image, bounding_boxes[0], scores[0], class_ids[0], class_names=network.classes)
fig = plt.gcf()
fig.set_size_inches(14, 14)
plt.show()

def count_object(network, class_ids, scores, bounding_boxes, object_label, threshold=___):
    num = 0
    index = []    
    for i in range(10):
        if class_ids[0][i] > -1 and scores[0][i] > threshold:
            index.append(class_ids[0][i].astype('int').asscalar())
        i+=1    
    for idx in index:
        if network.classes[idx] == object_label:
            num+=1
    return num

for object_label in ["person", "sports ball"]:
    count = count_object(network, class_ids, scores, bounding_boxes, object_label)
    print("{} objects of class '{}' detected".format(count, object_label))

thresholds = [0, 0.5, 0.75, 0.9, 0.99, 0.999]
for threshold in thresholds:
    num_people = count_object(network, class_ids, scores, bounding_boxes, "person", threshold=threshold)
    print("{} people detected using a threshold of {}.".format(num_people, threshold))

class PersonCounter():
    def __init__(self, threshold):
        self._network = gcv.model_zoo.get_model(selected_model, pretrained=True)
        self._threshold = threshold

    def set_threshold(self, threshold):
        self._threshold = threshold
        
    def count(self, filepath, visualize=False):
        image = load_image(filepath)
        norm_image, unnorm_image = transform_image(image)
        class_ids, scores, bounding_boxes = detect(network, norm_image)
        if visualize:
            self._visualize(unnorm_image, class_ids, scores, bounding_boxes)

        num_people = count_object(self._network, class_ids, scores, bounding_boxes, "person", self._threshold)

        if num_people == 1:
            print('{} person detected in {}.'.format(num_people, filepath)) 
        else:
            print('{} people detected in {}.'.format(num_people, filepath))
        return num_people
    
    def _visualize(self, unnorm_image, class_ids, scores, bounding_boxes):
        """
        Since the transformed_image is in NCHW layout and the values are normalized,
        this method slices and transposes to give CHW as required by matplotlib,
        and scales (-2, +2) to (0, 255) linearly.
        """
        ax = utils.viz.plot_bbox(unnorm_image,
                                 bounding_boxes[0],
                                 scores[0],
                                 class_ids[0],
                                 class_names=self._network.classes)
        fig = plt.gcf()
        fig.set_size_inches(14, 14)
        plt.show()

counter = PersonCounter(threshold=0.9)

counter.count(Path(___), visualize=True)

total_count = 0
for filepath in M6_IMAGES.glob('**/*.jpg'):
    total_count += counter.count(filepath)
print("### Summary: {} people detected.".format(total_count))

